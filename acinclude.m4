## libtool.m4 - Configure libtool for the target system. -*-Shell-script-*-
## Copyright (C) 1996-1999 Free Software Foundation, Inc.
## Originally by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
##
## As a special exception to the GNU General Public License, if you
## distribute this file as part of a program that contains a
## configuration script generated by Autoconf, you may include it under
## the same distribution terms that you use for the rest of that program.

m4_include([libtool.m4])

AC_DEFUN([PUT_CONFIG_NICE],[
  test -f $1 && mv $1 $1.old
  rm -f $1.old
  cat >$1<<EOF
#! /bin/sh
#
# Created by configure

EOF

  for var in CFLAGS CXXFLAGS CPPFLAGS LDFLAGS LIBS CC CXX; do
    eval val=\$$var
    if test -n "$val"; then
      echo "$var='$val' \\" >> $1
    fi
  done

  for arg in [$]0 "[$]@"; do
    echo "'[$]arg' \\" >> $1
  done
  echo '"[$]@"' >> $1
  chmod +x $1
])


AC_DEFUN(AC_SYS_PAGESIZE, [
    AC_MSG_CHECKING([for page size])
    
    AC_TRY_RUN([
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
	
	int main()
	{
	    int size;
	    FILE *fp;
	    
	    size = getpagesize();
	    fp = fopen("conftest.data","w");
	    fprintf(fp, "%d", size);
	    fclose(fp);
	    exit(0);
	}    
	], [ac_page_size=`cat conftest.data`], [ac_page_size="error"])
    AC_MSG_RESULT([$ac_page_size])	
    
    if test x"$ac_page_size" = xerror; then
	AC_MSG_ERROR([Unable to determine page size], 1)
    fi
    	
    AC_DEFINE_UNQUOTED(GPAGESIZE, $ac_page_size, [Page size of VM])
    
])dnl

AC_DEFUN(AC_SYS_STACKTOP, [
    AC_MSG_CHECKING([for stack top])
    
    dnl if host_alias is empty, ac_cv_host_alias may still have the info               
    if test -z "$host_alias"; then                                                     
	host_alias=$ac_cv_host_alias                                                   
    fi                                                                                 
    
    ac_stack_top="error"

    case $host_os in                                                                
    *linux*)
        case $host_cpu in
        alphaev6)
            ac_stack_top="0x0000000120000000"
        ;;
        *)
            ac_stack_top=`cat /proc/self/maps | $AWK '{if ([$]4 == "00:00" && [$]5 == "0" && [$]3 ~ /fff/) \
                    { match([$]1,/(.*)-(.*)/,a); print "0x" a[[2]]; }}'`
            if test -z "$ac_stack_top"; then
                ac_stack_top="error"
            fi
        ;;
        esac
	;;
    *freebsd*)
    AC_TRY_RUN([
#include <sys/types.h>
#include <vm/vm.h>
#include <vm/pmap.h>
#include <machine/param.h>
#include <machine/pmap.h>
#include <machine/vmparam.h>

#include <stdio.h>
#include <stdlib.h>

	int main()
	{
	    FILE *fp;
	    
	    fp = fopen("conftest.data","w");
	    fprintf(fp, "0x%zx", (size_t)USRSTACK);
	    fclose(fp);
	    exit(0);
	}    
	], [ac_stack_top=`cat conftest.data`], [ac_stack_top="error"])
	;;
    esac
    
    AC_MSG_RESULT([$ac_stack_top])	
    
    if test x"$ac_stack_top" = xerror; then
	AC_MSG_ERROR([Unable to determine stack top], 1)
    fi
    	
    AC_DEFINE_UNQUOTED(STACK_TOP, $ac_stack_top, [Top of the stack])
    
])dnl

AC_DEFUN([CHECK_MPICH],
[

AC_MSG_CHECKING([for mpich device])

AC_ARG_WITH(mpich-dev,
AC_HELP_STRING([--with-mpich-dev=NAME],[name of MPICH device used, supported are ch_shmem, ch_p4 and ch_gm, defaults to none.]),
[ MPICH_DEVICE="$withval"], [ MPICH_DEVICE="none" ])

AM_CONDITIONAL(MPI_BUILD, test x$MPICH_DEVICE != xnone)

case "$MPICH_DEVICE" in
	ch_shmem)
		MPICH_EXTRA_OBJECTS="mpich_shm.o"
		AC_MSG_RESULT([SMP/SysV shared memory])
		;;
	ch_gm)
		MPICH_EXTRA_OBJECTS="mpich_gm.o mpich_gm_sync.o mpich_gm_exclude.o"
		AC_MSG_RESULT([Myrinet/GM])
		;;
	ch_p4)
		MPICH_EXTRA_OBJECTS="mpich_p4.o mpich_p4_sync.o"
		AC_MSG_RESULT([p4/Ethernet])
		;;
	none)
		MPICH_EXTRA_OBJECTS=
		AC_MSG_RESULT([no multi-process checkpointing])
		;;
	*)
		AC_MSG_ERROR([Unsupported mpich device name])
		;;
esac

AC_SUBST(MPICH_EXTRA_OBJECTS)

AC_DEFINE_UNQUOTED([WITH_MPICH_DEV], $MPICH_DEVICE, [MPICH device to use])

AC_ARG_WITH(mpich-dir,
AC_HELP_STRING([--with-mpich-dir=DIR],[root directory path of mpich installation; defaults to /usr/local/mpich or /usr/mpich if not found  in /usr/local/mpich]),
[if test "$withval" != no ; then
  MPICH_HOME="$withval"
fi], [
MPICH_HOME=/usr/local/mpich
if test ! -f "${MPICH_HOME}/include/mpi.h"
then
	MPICH_HOME=/usr/mpich
fi
if test ! -f "${MPICH_HOME}/include/mpi.h"
then
	MPICH_HOME=
fi
])

if test "$MPICH_DEVICE" != none ; then
	AC_MSG_CHECKING([for mpich home])

	if test -d "${MPICH_HOME}"; then

		MPICH_LDFLAGS="-L${MPICH_HOME}/lib -lmpich -lpmpich"
		MPICH_CPPFLAGS="-I${MPICH_HOME}/include"
		AC_MSG_RESULT($MPICH_HOME)
		AC_DEFINE([WITH_MPICH], 1, [True if multi-processcheckpointing with MPICH is enabled])
	else
		AC_MSG_ERROR([MPICH home directory not found])
	fi
else
	MPICH_LDFLAGS=
	MPICH_CPPFLAGS=	
fi

AC_ARG_WITH(gm-dir,
AC_HELP_STRING([--with-gm-dir=DIR],[root directory path of gm library sources; defaults to /usr/local/gm or /usr/gm if not found  in /usr/local/gm]),
[if test "$withval" != no ; then
  GM_HOME="$withval"
fi], [
GM_HOME=/usr/local/gm
if test ! -f "${GM_HOME}/include/gm.h"
then
	GM_HOME=/usr/gm
fi
if test ! -f "${GM_HOME}/include/gm.h"
then
	GM_HOME=
fi
])

if test "$MPICH_DEVICE" = ch_gm ; then
	AC_MSG_CHECKING([for gm home])

	if test -d "${GM_HOME}"; then
		AC_MSG_RESULT($GM_HOME)
		GM_INCLUDE="-I${GM_HOME}/include"
	else
		AC_MSG_ERROR([GM home directory not found])
	fi
else
	GM_INCLUDE=
fi

AC_ARG_WITH(p4-dir,
AC_HELP_STRING([--with-p4-dir=DIR],[root directory path of MPICH-P4 library sources; defaults to /usr/local/mpich or /usr/mpich if not found  in /usr/local/mpich]),
[if test "$withval" != no ; then
  P4_HOME="$withval"
fi], [
P4_HOME=/usr/local/mpich
if test ! -f "${P4_HOME}/mpid/ch_p4/p4/include/p4.h"
then
	P4_HOME=/usr/mpich
fi
if test ! -f "${P4_HOME}/mpid/ch_p4/p4/include/p4.h"
then
	P4_HOME=
fi
])

if test "$MPICH_DEVICE" = ch_p4 ; then
	AC_MSG_CHECKING([for p4 home])

	if test -f "${P4_HOME}/mpid/ch_p4/p4/include/p4.h"; then
		AC_MSG_RESULT($P4_HOME)
		P4_INCLUDE="-I${P4_HOME}/mpid/ch_p4/p4/include -I${P4_HOME}/mpid/ch_p4/p4/"
	else
		AC_MSG_ERROR([P4 home directory not found])
	fi
else
	P4_INCLUDE=
fi


AC_SUBST(GM_INCLUDE)
AC_SUBST(P4_INCLUDE)
AC_SUBST(MPICH_CPPFLAGS)
AC_SUBST(MPICH_LDFLAGS)

])

AC_DEFUN([AC_SYS_WRAP],
[
    AC_MSG_CHECKING([for name of standard routines wrap])

    if test "$MPICH_DEVICE" = ch_gm ; then
	    F_MALLOC="malloc"
	    F_REALLOC="realloc"
	    F_CALLOC="calloc"
	    F_FREE="free"
    fi

    case $host_os in                                                                
    *linux*)                                                                         
	F_MMAP="mmap"
	F_MUNMAP="munmap"
	F_MMAP2="__mmap"
	F_MUNMAP2="__munmap"

	F_OPEN="open"
	F_CLOSE="close"
	F_DUP="dup"
	F_DUP2="dup2"
	F_READ="read"
	F_WRITE="write"
	F_READV="readv"
	F_WRITEV="writev"
	F_LSEEK="lseek"
	AC_MSG_RESULT([Linux glibc])
	;;
    *freebsd*)
	F_MMAP="mmap"
	F_MUNMAP="munmap"
	F_OPEN="open"
	F_CLOSE="close"
	F_DUP="dup"
	F_DUP2="dup2"
	F_READ="read"
	F_WRITE="write"
	F_READV="readv"
	F_WRITEV="writev"
	F_LSEEK="lseek"
	AC_MSG_RESULT([FreeBSD libc])
	;;
    *)
    	AC_MSG_ERROR([Unable to find out standard routines wrap name], 1)
	;;
    esac

    AC_DEFINE_UNQUOTED(F_REAL_MMAP, [__real_${F_MMAP}], [Functions wrap])
    AC_DEFINE_UNQUOTED(F_WRAP_MMAP, [__wrap_${F_MMAP}], [Functions wrap])

    AC_DEFINE_UNQUOTED(F_REAL_MUNMAP, [__real_${F_MUNMAP}], [Functions wrap])
    AC_DEFINE_UNQUOTED(F_WRAP_MUNMAP, [__wrap_${F_MUNMAP}], [Functions wrap])

    AC_DEFINE_UNQUOTED(F_REAL_OPEN, [__real_${F_OPEN}], [Functions wrap])
    AC_DEFINE_UNQUOTED(F_WRAP_OPEN, [__wrap_${F_OPEN}], [Functions wrap])

    AC_DEFINE_UNQUOTED(F_REAL_CLOSE, [__real_${F_CLOSE}], [Functions wrap])
    AC_DEFINE_UNQUOTED(F_WRAP_CLOSE, [__wrap_${F_CLOSE}], [Functions wrap])

    AC_DEFINE_UNQUOTED(F_REAL_DUP, [__real_${F_DUP}], [Functions wrap])
    AC_DEFINE_UNQUOTED(F_WRAP_DUP, [__wrap_${F_DUP}], [Functions wrap])

    AC_DEFINE_UNQUOTED(F_REAL_DUP2, [__real_${F_DUP2}], [Functions wrap])
    AC_DEFINE_UNQUOTED(F_WRAP_DUP2, [__wrap_${F_DUP2}], [Functions wrap])

    AC_DEFINE_UNQUOTED(F_REAL_READ, [__real_${F_READ}], [Functions wrap])
    AC_DEFINE_UNQUOTED(F_WRAP_READ, [__wrap_${F_READ}], [Functions wrap])

    AC_DEFINE_UNQUOTED(F_REAL_READV, [__real_${F_READV}], [Functions wrap])
    AC_DEFINE_UNQUOTED(F_WRAP_READV, [__wrap_${F_READV}], [Functions wrap])

    AC_DEFINE_UNQUOTED(F_REAL_WRITE, [__real_${F_WRITE}], [Functions wrap])
    AC_DEFINE_UNQUOTED(F_WRAP_WRITE, [__wrap_${F_WRITE}], [Functions wrap])

    AC_DEFINE_UNQUOTED(F_REAL_WRITEV, [__real_${F_WRITEV}], [Functions wrap])
    AC_DEFINE_UNQUOTED(F_WRAP_WRITEV, [__wrap_${F_WRITEV}], [Functions wrap])

    AC_DEFINE_UNQUOTED(F_REAL_LSEEK, [__real_${F_LSEEK}], [Functions wrap])
    AC_DEFINE_UNQUOTED(F_WRAP_LSEEK, [__wrap_${F_LSEEK}], [Functions wrap])

    FUNCS="F_MMAP F_MUNMAP F_OPEN F_CLOSE F_DUP F_DUP2 F_READ F_READV F_WRITE F_WRITEV F_LSEEK"

    if test -n "$F_MALLOC" ; then
	    AC_DEFINE_UNQUOTED(F_REAL_MALLOC, [__real_${F_MALLOC}], [Functions wrap])
	    AC_DEFINE_UNQUOTED(F_WRAP_MALLOC, [__wrap_${F_MALLOC}], [Functions wrap])

	    AC_DEFINE_UNQUOTED(F_REAL_REALLOC, [__real_${F_REALLOC}], [Functions wrap])
	    AC_DEFINE_UNQUOTED(F_WRAP_REALLOC, [__wrap_${F_REALLOC}], [Functions wrap])

	    AC_DEFINE_UNQUOTED(F_REAL_CALLOC, [__real_${F_CALLOC}], [Functions wrap])
	    AC_DEFINE_UNQUOTED(F_WRAP_CALLOC, [__wrap_${F_CALLOC}], [Functions wrap])

	    AC_DEFINE_UNQUOTED(F_REAL_FREE, [__real_${F_FREE}], [Functions wrap])
	    AC_DEFINE_UNQUOTED(F_WRAP_FREE, [__wrap_${F_FREE}], [Functions wrap])

	    FUNCS="$FUNCS F_MALLOC F_FREE F_REALLOC F_CALLOC"
    fi

    if test -n "$F_MMAP2"; then
    	AC_DEFINE_UNQUOTED(F_REAL_MMAP2, [__real_${F_MMAP2}], [Functions wrap])
    	AC_DEFINE_UNQUOTED(F_WRAP_MMAP2, [__wrap_${F_MMAP2}], [Functions wrap])
    	AC_DEFINE_UNQUOTED(F_REAL_MUNMAP2, [__real_${F_MUNMAP2}], [Functions wrap])
    	AC_DEFINE_UNQUOTED(F_WRAP_MUNMAP2, [__wrap_${F_MUNMAP2}], [Functions wrap])
	FUNCS="$FUNCS F_MMAP2 F_MUNMAP2"
    fi

    for func in $FUNCS; do
        eval _func=\$${func}
    	WRAP_FUNCS="$WRAP_FUNCS -Wl,--wrap -Wl,$_func"
    done
    
   AC_SUBST(WRAP_FUNCS)
  
])

AC_DEFUN([AC_SYS_FORTRAN],
[
    AC_MSG_CHECKING([for argc/argv in Fortran library])

    case $host_os in                                                                
    *linux*)                                                                         
	FORTRAN_ARGC="__libc_argc"
	FORTRAN_ARGV="__libc_argv"
	AC_MSG_RESULT([Linux glibc])
	;;
    *freebsd*)
	FORTRAN_ARGC="f__xargc"
	FORTRAN_ARGV="f__xargv"
	AC_MSG_RESULT([FreeBSD libf2c])
	;;
    *)
    	AC_MSG_ERROR([Unable to find out Fortran library argc/argv names], 1)
	;;
    esac

    AC_DEFINE_UNQUOTED(FORTRAN_ARGC, [${FORTRAN_ARGC}], [Fortran argc])
    AC_DEFINE_UNQUOTED(FORTRAN_ARGV, [${FORTRAN_ARGV}], [Fortran argv])
])


AC_DEFUN([AC_SYS_ELF_BITS],
[
    AC_MSG_CHECKING([for elf bits])

    case $host_cpu in                                                                
    i[[34567]]86*)                                                                         
	ELF_EHDR="Elf32_Ehdr"
	ELF_PHDR="Elf32_Phdr"
	AC_MSG_RESULT([32])
	;;
    amd64*|alphaev6*|x86_64*)
	ELF_EHDR="Elf64_Ehdr"
	ELF_PHDR="Elf64_Phdr"
	AC_MSG_RESULT([64])
	;;
    *)
    	AC_MSG_ERROR([Unable to find out elf bits], 1)
    	;;
    esac
    
    AC_DEFINE_UNQUOTED(ELF_EHDR, [$ELF_EHDR], [Elf Ehdr structure])
    AC_DEFINE_UNQUOTED(ELF_PHDR, [$ELF_PHDR], [Elf Phdr structure])
    
])

AC_DEFUN([AC_SYS_HEAP_START],
[
    AC_MSG_CHECKING([for stack start])

    case $host_os in                                                                
    *linux*)                                                                         
    	AC_DEFINE_UNQUOTED(HEAP_START, [&end], [Start of heap])
	AC_MSG_RESULT([Linux, unaligned])
	;;
    *freebsd*)
    	AC_DEFINE_UNQUOTED(HEAP_START, [PAGE_ALIGN(&end)], [Start of heap])
	AC_MSG_RESULT([FreeBSD, aligned])
	;;
    *)
    	AC_MSG_ERROR([Stack top undefined], 1)
	;;
    esac
])


AC_DEFUN([CHECK_PARAMS],
[

AC_ARG_WITH(max-procs,
AC_HELP_STRING([--with-max-procs=NUM],[maximum number of parallel processes in MPI environment. Default: 1024]),
[MAX_PROCS="$withval"], 
[MAX_PROCS=1024])
AC_DEFINE_UNQUOTED(MAX_PROCS, [$MAX_PROCS], [Maximum number of processes])
AC_MSG_CHECKING([for maximum number of processes])
AC_MSG_RESULT([$MAX_PROCS])

AC_ARG_WITH(max-mmaped,
AC_HELP_STRING([--with-max-mmaped=NUM],[maximum number of memory mapped areas library can handle. Default: 256]),
[MAX_MMAPED="$withval"], 
[MAX_MMAPED=256])
AC_DEFINE_UNQUOTED(MAX_MMAPED, [$MAX_MMAPED], [Maximum number of memory mapped areas])
AC_MSG_CHECKING([for maximum number of memory mapped areas])
AC_MSG_RESULT([$MAX_MMAPED])

AC_ARG_WITH(max-files,
AC_HELP_STRING([--with-max-files=NUM],[maximum number of file descriptors library can handle. Default: 128]),
[MAX_FILES="$withval"], 
[MAX_FILES=128])
AC_DEFINE_UNQUOTED(MAX_FILES, [$MAX_FILES], [Maximum number of file descriptors])
AC_MSG_CHECKING([for maximum number of file descriptors])
AC_MSG_RESULT([$MAX_FILES])

AC_ARG_WITH(max-mem-areas,
AC_HELP_STRING([--with-max-mem-areas=NUM],[maximum number of memory areas library can handle. Default: 8192]),
[MAX_MEM_AREAS="$withval"], 
[MAX_MEM_AREAS=8192])
AC_DEFINE_UNQUOTED(MAX_MEM_AREAS, [$MAX_MEM_AREAS], [Maximum number of memory areas])
AC_MSG_CHECKING([for maximum number of memory areas])
AC_MSG_RESULT([$MAX_MEM_AREAS])

])

AC_DEFUN([CHECK_COMPRESSION],
[

AC_MSG_CHECKING([for compression support])

AC_ARG_ENABLE(compression,
AC_HELP_STRING([--disable-compression], [disable compression of checkpoints]),
[ ENABLE_COMPRESSION="$enableval" ], [ ENABLE_COMPRESSION="yes" ])

if test x"$ENABLE_COMPRESSION" = xno; then
	AC_MSG_RESULT([disabled])
else
	AC_MSG_RESULT([enabled])
	AC_DEFINE_UNQUOTED(ENABLE_COMPRESSION, 1, [Whether to enable compression of checkpoints])
fi

])

AC_DEFUN([CHECK_BENCHMARKING],
[

AC_MSG_CHECKING([for benchmarking])

AC_ARG_ENABLE(benchmarking,
AC_HELP_STRING([--disable-benchmarking], [disable library benchmarks]),
[ ENABLE_BENCHMARK="$enableval" ], [ ENABLE_BENCMARK="yes" ])

if test x"$ENABLE_BENCHMARK" = xno; then
	AC_MSG_RESULT([disabled])
else
	AC_MSG_RESULT([enabled])
	AC_DEFINE_UNQUOTED(ENABLE_BENCHMARK, 1, [Whether to enable library benchmarking])
fi

])


